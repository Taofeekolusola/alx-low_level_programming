!<arch>
0-isupper.c/    0           0     0     644     276       `
#include "main.h"

/**
 * _isupper - Checks if the letter are in upperecase
 * @x: the number to be checked
 * Return: 1 for upper letters or 0 for any else
 */

int _isupper(int x)
{
	        if (x >= 65 && x <= 90)
		{
			return (1);
						        }
		        return (0);
}
0-memset.c/     0           0     0     644     273       `
#include "main.h"

/**
 * _memset - Entry point
 * @s: pointed destination
 * @b: constant byte
 * @n: bytes
 * Return: Always 0 (Success)
 */
char *_memset(char *s, char b, unsigned int n)
{
	        unsigned int a;

		for (a = 0; a < n; a++)
			s[a] = b;
		return (s);
}

0-strcat.c/     0           0     0     644     418       `
#include "main.h"

/**
 * _strcat - appends the src string to the dest string
 * @dest: the first string to be appended
 * @src: the second string to be appended
 * Return: void
 */

char *_strcat(char *dest, char *src)
{
	        int a;
		int b;

		a = 0;
		while (dest[a] != '\0')
		{
			a++;
		}
		b = 0;

	
		while (src[b] != '\0')
		{
			dest[a] = src[b];
			a++;
			b++;
		}
		dest[a] = '\0';
		return (dest);
}
1-isdigit.c/    0           0     0     644     241       `
#include "main.h"

/**
 * _isdigit - checks number zero to nine
 * @x: the number to be checked
 * Return: 1 if c is a digit 0 if not
 */

int _isdigit(int x)
{
	        if (x >= 48 && x <= 57)
		{
			return (1);
		}
		        return (0);
}

1-memcpy.c/     0           0     0     644     279       `
#include "main.h"
/**
 * _memcpy - copies memory area
 * @src: input
 * @dest: input
 * @n: input
 * Return: Always 0 (Success)
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	        unsigned int a;

		for (a = 0; a < n; a++)
			dest[a] = src[a];
		return (dest);
}

1-strncat.c/    0           0     0     644     416       `
#include "main.h"

/**
 * _strncat - Writes a function that concatenates two strings
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	        int a;
		int b;

		a = 0;
		while (dest[a] != '\0')
		{
			a++;
		}
		b = 0;
		while (b < n && src[b] != '\0')
		{
			dest[a] = src[b];
			a++;
			b++;
		}
		dest[a] = '\0';
		return (dest);
}
100-atoi.c/     0           0     0     644     1         `


2-strchr.c/     0           0     0     644     300       `
#include <stdio.h>
#include "main.h"

/**
 *  * _strchr - Entry point
 *   * @s: Input
 *    * @c: Input
 *     * Return: Always 0 (Success)
 *      */

char *_strchr(char *s, char c)
{
	        int a;
		for (a = 0; a >= '\0'; a++)
		{
			if (s[a] == c)
				return (s + a);
		}

	
		return (NULL);
}
2-strlen.c/     0           0     0     644     1         `


2-strncpy.c/    0           0     0     644     352       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	        int k;

		k = 0;		
		while (k < n && src[k] != '\0')
		{
			dest[k] = src[k];
			k++;
		}
		while (k < n)
		{
			dest[k] = '\0';
			k++;
		}
		return (dest);
}
3-islower.c/    0           0     0     644     280       `
#include "main.h"

/**
 * _islower - checks for lower characters
 * @C: the character to be checked
 * Return: 1 for lowercase character or 0 for anything else
 */

int _islower(int C)
{
	        if (C >= 97 && C <= 122)
		{
			return (1);
						        }
		        return (0);
}
3-puts.c/       0           0     0     644     1         `


3-strcmp.c/     0           0     0     644     344       `
#include "main.h"
/**
 *  * _strcmp - campares two strings
 *   * @s1: input value
 *    * @s2: input value
 *     * Return: s1[i] - s2[i]
 *      */
int _strcmp(char *s1, char *s2)
{
	        int i;

		i = 0;
		while (s1[i] != '\0' && s2[i] != '\0')
		{
			if (s1[i] != s2[i])
			{
				return (s1[i] - s2[i]);
			}
			i++;
		}
		return (0);
}
3-strspn.c/     0           0     0     644     454       `
#include "main.h"
/**
 * _strspn - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
	        unsigned int a, b, val, check;

		val = 0;

	
		for (a = 0; s[a] != '\0'; b++)
		{
			check = 0;

		
			for (b = 0; accept[b] != '\0'; b++)
			{
				if (accept[b] == s[a])
				{
					val++;
					check = 1;
				}
			}
			if (check == 0)
			{
				return (s + a);
			}
			return (0);
		}
}
4-isalpha.c/    0           0     0     644     312       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic characters
 * @C: the character to be checked
 * Return: 1 for alphabetic character or 0 for anything else
 */

int _isalpha(int C)
{
	        if ((C >= 65 && C <= 90) || (C >= 97 && C <= 122))
		{
			return (1);
						        }
		        return (0);
}
4-strpbrk.c/    0           0     0     644     370       `
#include <stdio.h>
#include "main.h"

/**
 * _strpbrk - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */

char *_strpbrk(char *s, char *accept)
{
	        int a, n;

		for (a = 0; s[a] != '\0'; a++)
		{
			for (n = 0; accept[n] != '\0'; n++)
			{
				if (s[a] == accept[n])
					return (s + a);
			}
		}					        }

		    return (NULL);
}
5-strstr.c/     0           0     0     644     456       `
#include <stdio.h>
#include "main.h"

/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */

char *_strstr(char *haystack, char *needle)

{
	        for (; *haystack != '\0'; haystack++)
		{

			char *one = haystack;
			char *two = needle;

			while (*one == *two && *two != '\0')
			{

			
				one++;
				two++;
			}
			if  (*two == '\0')
				return (haystack);
									        }
		        return (NULL);
}
6-abs.c/        0           0     0     644     1         `


9-strcpy.c/     0           0     0     644     1         `


_putchar.c/     0           0     0     644     246       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print*
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
		return (write(1, &c, 1));
}
